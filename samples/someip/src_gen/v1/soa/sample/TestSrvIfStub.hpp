/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_SAMPLE_Test_Srv_If_STUB_HPP_
#define V1_SOA_SAMPLE_Test_Srv_If_STUB_HPP_

#include <functional>
#include <sstream>



#include <soa/sample/CustomTypes.hpp>

#include <v1/soa/sample/TestSrvIf.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace soa {
namespace sample {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service TestSrvIf. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class TestSrvIfStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual TestSrvIf {
 public:
    ///Notifies all remote listeners about a change of value of the attribute StatusFld.
    virtual void fireStatusFldAttributeChanged(const int8_t &StatusFld) = 0;
    /**
    * Sends a broadcast event for TimeEvt. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireTimeEvtEvent(const ::soa::sample::CustomTypes::TimeInfo &_data) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockStatusFldAttribute(bool _lockAccess) {
        if (_lockAccess) {
            statusFldMutex_.lock();
        } else {
            statusFldMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::recursive_mutex statusFldMutex_;

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for TestSrvIf.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TestSrvIfStubRemoteEvent
{
public:
    virtual ~TestSrvIfStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute StatusFld
    virtual bool onRemoteSetStatusFldAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int8_t _value) = 0;
    /// Action callback for remote set requests on the attribute StatusFld
    virtual void onRemoteStatusFldAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service TestSrvIf to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TestSrvIfStub
    : public virtual CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>
{
public:
    typedef std::function<void (int32_t _outData)> PlusMtdReply_t;

    virtual ~TestSrvIfStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 4);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method PlusMtd.
    virtual void PlusMtd(const std::shared_ptr<CommonAPI::ClientId> _client, ::soa::sample::CustomTypes::PlusParamInfo _inData, PlusMtdReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method HelloMtd.
    virtual void HelloMtd(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inData) = 0;
    /// Provides getter access to the attribute StatusFld
    virtual const int8_t &getStatusFldAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireStatusFldAttributeChanged(int8_t _value) {
    auto stubAdapter = CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireStatusFldAttributeChanged(_value);
    }
    void lockStatusFldAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockStatusFldAttribute(_lockAccess);
    }
    /// Sends a broadcast event for TimeEvt.
    virtual void fireTimeEvtEvent(const ::soa::sample::CustomTypes::TimeInfo &_data) {
        auto stubAdapter = CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireTimeEvtEvent(_data);
    }


    using CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef TestSrvIfStubRemoteEvent RemoteEventType;
    typedef ::v1::soa::sample::TestSrvIf StubInterface;
};

} // namespace sample
} // namespace soa
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SOA_SAMPLE_Test_Srv_If_STUB_HPP_
