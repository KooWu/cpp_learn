/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_SOA_SAMPLE_TEST_SRV_IF_SOMEIP_STUB_ADAPTER_HPP_
#define V1_SOA_SAMPLE_TEST_SRV_IF_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/soa/sample/TestSrvIfStub.hpp>
#include <soa/sample/CustomTypesSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace soa {
namespace sample {

template <typename _Stub = ::v1::soa::sample::TestSrvIfStub, typename... _Stubs>
class TestSrvIfSomeIPStubAdapterInternal
    : public virtual TestSrvIfStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< TestSrvIfSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> TestSrvIfSomeIPStubAdapterHelper;

    ~TestSrvIfSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        TestSrvIfSomeIPStubAdapterHelper::deinit();
    }

    void fireStatusFldAttributeChanged(const int8_t &_value);
    
    void fireTimeEvtEvent(const ::soa::sample::CustomTypes::TimeInfo &_data);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::soa::sample::TestSrvIfStub,
        CommonAPI::Version
    > getTestSrvIfInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::soa::sample::TestSrvIfStub,
        int8_t,
        CommonAPI::SomeIP::IntegerDeployment<int8_t>
    > getStatusFldAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::soa::sample::TestSrvIfStub,
        int8_t,
        CommonAPI::SomeIP::IntegerDeployment<int8_t>
    > setStatusFldAttributeStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::soa::sample::TestSrvIfStub,
        std::tuple< ::soa::sample::CustomTypes::PlusParamInfo>,
        std::tuple< int32_t>,
        std::tuple< ::soa::sample::CustomTypes_::PlusParamInfoDeployment_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int32_t>>
    > plusMtdStubDispatcher;
    
    CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::soa::sample::TestSrvIfStub,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > helloMtdStubDispatcher;
    
    TestSrvIfSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        TestSrvIfSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< TestSrvIfStub>(_stub)),
        getTestSrvIfInterfaceVersionStubDispatcher(&TestSrvIfStub::lockInterfaceVersionAttribute, &TestSrvIfStub::getInterfaceVersion, false, true),
        getStatusFldAttributeStubDispatcher(
            &::v1::soa::sample::TestSrvIfStub::lockStatusFldAttribute,
            &::v1::soa::sample::TestSrvIfStub::getStatusFldAttribute,
            false,
            _stub->hasElement(2)),
        setStatusFldAttributeStubDispatcher(
            &::v1::soa::sample::TestSrvIfStub::lockStatusFldAttribute,
            &::v1::soa::sample::TestSrvIfStub::getStatusFldAttribute,
            &TestSrvIfStubRemoteEvent::onRemoteSetStatusFldAttribute,
            &TestSrvIfStubRemoteEvent::onRemoteStatusFldAttributeChanged,
            &TestSrvIfStubAdapter::fireStatusFldAttributeChanged,
            false,
            _stub->hasElement(2))
        ,
        plusMtdStubDispatcher(
            &TestSrvIfStub::PlusMtd,
            false,
            _stub->hasElement(0),
            std::make_tuple(static_cast< ::soa::sample::CustomTypes_::PlusParamInfoDeployment_t* >(nullptr)),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr)))
        
        ,
        helloMtdStubDispatcher(
            &TestSrvIfStub::HelloMtd,
            false,
            _stub->hasElement(1),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
    {
        TestSrvIfSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xa4) }, &getStatusFldAttributeStubDispatcher );
        TestSrvIfSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xa3) }, &setStatusFldAttributeStubDispatcher );
        TestSrvIfSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xa1) }, &plusMtdStubDispatcher );
        TestSrvIfSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xa2) }, &helloMtdStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>();

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8002), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        if (_stub->hasElement(2)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireStatusFldAttributeChanged(std::dynamic_pointer_cast< ::v1::soa::sample::TestSrvIfStub>(_stub)->getStatusFldAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void TestSrvIfSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireStatusFldAttributeChanged(const int8_t &_value) {
    CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int8_t,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8001),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void TestSrvIfSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireTimeEvtEvent(const ::soa::sample::CustomTypes::TimeInfo &_data) {
    CommonAPI::Deployable< ::soa::sample::CustomTypes::TimeInfo, ::soa::sample::CustomTypes_::TimeInfoDeployment_t> deployed_data(_data, static_cast< ::soa::sample::CustomTypes_::TimeInfoDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::soa::sample::CustomTypes::TimeInfo, ::soa::sample::CustomTypes_::TimeInfoDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8002),
            false,
             deployed_data 
    );
}


template <typename _Stub, typename... _Stubs>
void TestSrvIfSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void TestSrvIfSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v1::soa::sample::TestSrvIfStub, typename... _Stubs>
class TestSrvIfSomeIPStubAdapter
    : public TestSrvIfSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    TestSrvIfSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          TestSrvIfSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace sample
} // namespace soa
} // namespace v1

#endif // V1_SOA_SAMPLE_Test_Srv_If_SOMEIP_STUB_ADAPTER_HPP_
