/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_SAMPLE_Test_Srv_If_STUB_DEFAULT_HPP_
#define V1_SOA_SAMPLE_Test_Srv_If_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/soa/sample/TestSrvIfStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace soa {
namespace sample {

/**
 * Provides a default implementation for TestSrvIfStubRemoteEvent and
 * TestSrvIfStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT TestSrvIfStubDefault
    : public virtual TestSrvIfStub {
public:
    COMMONAPI_EXPORT TestSrvIfStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(TestSrvIf::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT TestSrvIfStubRemoteEvent* initStubAdapter(const std::shared_ptr< TestSrvIfStubAdapter> &_adapter) {
        CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual void PlusMtd(const std::shared_ptr<CommonAPI::ClientId> _client, ::soa::sample::CustomTypes::PlusParamInfo _inData, PlusMtdReply_t _reply) {
        (void)_client;
        (void)_inData;
        int32_t outData = 0;
        _reply(outData);
    }
    COMMONAPI_EXPORT virtual void HelloMtd(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _inData) {
        (void)_client;
        (void)_inData;
    }
    COMMONAPI_EXPORT virtual const int8_t &getStatusFldAttribute() {
        return statusFldAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const int8_t &getStatusFldAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getStatusFldAttribute();
    }
    COMMONAPI_EXPORT virtual void setStatusFldAttribute(int8_t _value) {
        const bool valueChanged = trySetStatusFldAttribute(std::move(_value));
        if (valueChanged) {
            fireStatusFldAttributeChanged(statusFldAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setStatusFldAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int8_t _value) {
        (void)_client;
        setStatusFldAttribute(_value);
    }
    COMMONAPI_EXPORT virtual void fireTimeEvtEvent(const ::soa::sample::CustomTypes::TimeInfo &_data) {
        TestSrvIfStub::fireTimeEvtEvent(_data);
    }


protected:
    COMMONAPI_EXPORT virtual bool trySetStatusFldAttribute(int8_t _value) {
        if (!validateStatusFldAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<TestSrvIfStubAdapter> stubAdapter = CommonAPI::Stub<TestSrvIfStubAdapter, TestSrvIfStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockStatusFldAttribute(true);
            valueChanged = (statusFldAttributeValue_ != _value);
            statusFldAttributeValue_ = std::move(_value);
            stubAdapter->lockStatusFldAttribute(false);
        } else {
            valueChanged = (statusFldAttributeValue_ != _value);
            statusFldAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateStatusFldAttributeRequestedValue(const int8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteStatusFldAttributeChanged() {
        // No operation in default
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual TestSrvIfStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(TestSrvIfStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        COMMONAPI_EXPORT virtual void onRemoteStatusFldAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteStatusFldAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetStatusFldAttribute(int8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetStatusFldAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetStatusFldAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int8_t _value) {
            (void)_client;
            return onRemoteSetStatusFldAttribute(_value);
        }

    private:
        TestSrvIfStubDefault *defaultStub_;
    };
protected:
    TestSrvIfStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    int8_t statusFldAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace sample
} // namespace soa
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SOA_SAMPLE_Test_Srv_If_STUB_DEFAULT
