/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/soa/sample/TestSrvIfSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace soa {
namespace sample {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createTestSrvIfSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< TestSrvIfSomeIPProxy>(_address, _connection);
}

void initializeTestSrvIfSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:soa.sample.TestSrvIf:v1_0:TestSrvIf.server_app",
        0x382, 0x1, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "soa.sample.TestSrvIf:v1_0",
        &createTestSrvIfSomeIPProxy);
}

INITIALIZER(registerTestSrvIfSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeTestSrvIfSomeIPProxy);
}

TestSrvIfSomeIPProxy::TestSrvIfSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          statusFld_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x8001), CommonAPI::SomeIP::method_id_t(0xa4), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, CommonAPI::SomeIP::method_id_t(0xa3), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr)),
          timeEvt_(*this, 0x2, CommonAPI::SomeIP::event_id_t(0x8002), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< ::soa::sample::CustomTypes_::TimeInfoDeployment_t* >(nullptr)))
{
}

TestSrvIfSomeIPProxy::~TestSrvIfSomeIPProxy() {
}

TestSrvIfSomeIPProxy::StatusFldAttribute& TestSrvIfSomeIPProxy::getStatusFldAttribute() {
    return statusFld_;
}

TestSrvIfSomeIPProxy::TimeEvtEvent& TestSrvIfSomeIPProxy::getTimeEvtEvent() {
    return timeEvt_;
}

void TestSrvIfSomeIPProxy::PlusMtd(::soa::sample::CustomTypes::PlusParamInfo _inData, CommonAPI::CallStatus &_internalCallStatus, int32_t &_outData, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::soa::sample::CustomTypes::PlusParamInfo, ::soa::sample::CustomTypes_::PlusParamInfoDeployment_t> deploy_inData(_inData, static_cast< ::soa::sample::CustomTypes_::PlusParamInfoDeployment_t* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_outData(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::soa::sample::CustomTypes::PlusParamInfo,
                ::soa::sample::CustomTypes_::PlusParamInfoDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xa1),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_inData,
        _internalCallStatus,
        deploy_outData);
    _outData = deploy_outData.getValue();
}

std::future<CommonAPI::CallStatus> TestSrvIfSomeIPProxy::PlusMtdAsync(const ::soa::sample::CustomTypes::PlusParamInfo &_inData, PlusMtdAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::soa::sample::CustomTypes::PlusParamInfo, ::soa::sample::CustomTypes_::PlusParamInfoDeployment_t> deploy_inData(_inData, static_cast< ::soa::sample::CustomTypes_::PlusParamInfoDeployment_t* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_outData(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::soa::sample::CustomTypes::PlusParamInfo,
                ::soa::sample::CustomTypes_::PlusParamInfoDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xa1),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_inData,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> > _outData) {
            if (_callback)
                _callback(_internalCallStatus, _outData.getValue());
        },
        std::make_tuple(deploy_outData));
}

void TestSrvIfSomeIPProxy::HelloMtd(std::string _inData, CommonAPI::CallStatus &_internalCallStatus) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_inData(_inData, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethod(
        *this,
        CommonAPI::SomeIP::method_id_t(0xa2),
        true,
        false,
        deploy_inData,
        _internalCallStatus);
}

void TestSrvIfSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> TestSrvIfSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace sample
} // namespace soa
} // namespace v1
