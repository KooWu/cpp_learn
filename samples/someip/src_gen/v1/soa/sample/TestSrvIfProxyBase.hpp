/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_SAMPLE_Test_Srv_If_PROXY_BASE_HPP_
#define V1_SOA_SAMPLE_Test_Srv_If_PROXY_BASE_HPP_

#include <v1/soa/sample/TestSrvIf.hpp>


#include <soa/sample/CustomTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace soa {
namespace sample {

class TestSrvIfProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<int8_t> StatusFldAttribute;
    typedef CommonAPI::Event<
        ::soa::sample::CustomTypes::TimeInfo
    > TimeEvtEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> PlusMtdAsyncCallback;

    virtual void PlusMtd(::soa::sample::CustomTypes::PlusParamInfo _inData, CommonAPI::CallStatus &_internalCallStatus, int32_t &_outData, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> PlusMtdAsync(const ::soa::sample::CustomTypes::PlusParamInfo &_inData, PlusMtdAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * @invariant Fire And Forget
     */
    virtual void HelloMtd(std::string _inData, CommonAPI::CallStatus &_internalCallStatus) = 0;
    virtual StatusFldAttribute& getStatusFldAttribute() = 0;
    virtual TimeEvtEvent& getTimeEvtEvent() = 0;

    virtual std::future<void> getCompletionFuture() = 0;
};

} // namespace sample
} // namespace soa
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SOA_SAMPLE_Test_Srv_If_PROXY_BASE_HPP_
